//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IProductService")]
    public interface IProductService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/findAll", ReplyAction="http://tempuri.org/IProductService/findAllResponse")]
        System.Threading.Tasks.Task<POC_Common.ProductDTO[]> findAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/findAllPaged", ReplyAction="http://tempuri.org/IProductService/findAllPagedResponse")]
        System.Threading.Tasks.Task<POC_Common.ContainerDTO<POC_Common.ProductDTO>> findAllPagedAsync(int start, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/findById", ReplyAction="http://tempuri.org/IProductService/findByIdResponse")]
        System.Threading.Tasks.Task<POC_Common.ProductDTO> findByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/findByCreationDate", ReplyAction="http://tempuri.org/IProductService/findByCreationDateResponse")]
        System.Threading.Tasks.Task<POC_Common.ProductDTO[]> findByCreationDateAsync(System.DateTime creationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/create", ReplyAction="http://tempuri.org/IProductService/createResponse")]
        System.Threading.Tasks.Task<bool> createAsync(POC_Common.ProductDTO product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/update", ReplyAction="http://tempuri.org/IProductService/updateResponse")]
        System.Threading.Tasks.Task<bool> updateAsync(POC_Common.ProductDTO product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/delete", ReplyAction="http://tempuri.org/IProductService/deleteResponse")]
        System.Threading.Tasks.Task<bool> deleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IProductServiceChannel : ProductServiceReference.IProductService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<ProductServiceReference.IProductService>, ProductServiceReference.IProductService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ProductServiceClient() : 
                base(ProductServiceClient.GetDefaultBinding(), ProductServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IProductService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ProductServiceClient.GetBindingForEndpoint(endpointConfiguration), ProductServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ProductServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ProductServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<POC_Common.ProductDTO[]> findAllAsync()
        {
            return base.Channel.findAllAsync();
        }
        
        public System.Threading.Tasks.Task<POC_Common.ContainerDTO<POC_Common.ProductDTO>> findAllPagedAsync(int start, int length)
        {
            return base.Channel.findAllPagedAsync(start, length);
        }
        
        public System.Threading.Tasks.Task<POC_Common.ProductDTO> findByIdAsync(int id)
        {
            return base.Channel.findByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<POC_Common.ProductDTO[]> findByCreationDateAsync(System.DateTime creationDate)
        {
            return base.Channel.findByCreationDateAsync(creationDate);
        }
        
        public System.Threading.Tasks.Task<bool> createAsync(POC_Common.ProductDTO product)
        {
            return base.Channel.createAsync(product);
        }
        
        public System.Threading.Tasks.Task<bool> updateAsync(POC_Common.ProductDTO product)
        {
            return base.Channel.updateAsync(product);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAsync(int id)
        {
            return base.Channel.deleteAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IProductService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IProductService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:9420/ProductService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ProductServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IProductService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ProductServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IProductService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IProductService,
        }
    }
}
